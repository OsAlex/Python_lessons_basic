# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]

# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку

# комментарий про решение в одну строку к первой или второй задаче относился?
print([list(map(lambda x: x[i], matrix)) for i in range(len(matrix))])

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""

import re

print(5 * int(re.findall(r'(?=(\d))\1{5}', number)[0]), number.find(5 * re.findall(r'(?=(\d))\1{5}', number)[0]))

# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.



# тут решить в одну строку не смог
import random

# получить координаты диагональных клеток от текущей позиции
def get_diagonals(ferz_pos):
    result = []

    x, y = ferz_pos
    while x  > 0 and y > 0:
        x = x - 1
        y = y - 1
        result.append([x, y])

    x, y = ferz_pos
    while x  < 9 and y > 0:
        x = x + 1
        y = y - 1
        result.append([x, y])

    x, y = ferz_pos
    while x  > 0 and y < 9:
        x = x - 1
        y = y + 1
        result.append([x, y])

    x, y = ferz_pos
    while x  < 9 and y < 9:
        x = x + 1
        y = y + 1
        result.append([x, y])

    return result

def output_desk(positions):
    for i in range(1, 9):
        line = ''
        for j in range(1, 9):
            if [i, j] in positions:
                line = line + '|@'
            else:
                line = line + '|_'
        print(line)

def have_peresechenie(positions):
    peresechenie = 0
    for ferz_pos in positions:
        other_positions = [x for x in positions if x != ferz_pos]
        # проверим есть ли другие ферзи по вертикали
        if ferz_pos[0] in [i[0] for i in other_positions]:
            peresechenie = 1
            break

        # проверим есть ли другие ферзи по горизонтали
        if ferz_pos[1] in [i[1] for i in other_positions]:
            peresechenie = 1
            break

        diagonals_pos = get_diagonals(ferz_pos)
        if any(x in other_positions for x in diagonals_pos):
            peresechenie = 1
            break

    if peresechenie == 1:
        print('YES')
    else:
        print('NO')


positions = [[random.randint(1, 8), random.randint(1, 8)] for i in range(1, 9)]
output_desk(positions)
have_peresechenie(positions)

positions = [[1,1], [2,8], [3,2], [4,7], [5,3], [8,4]]  # смог расставить только 6 ферзей
output_desk(positions)
have_peresechenie(positions)
